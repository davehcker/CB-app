from web3 import Web3
from decoder import decodeEvent
from data import *
import asyncio

web3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))

genesis_blk_number = 3940926

#Checksummed token address
token_address = '0xbEC7616EB21829a513e345a94404d71bf3796994'

event_filter = web3.eth.filter({
    "address": token_address,
    "fromBlock": str(hex(genesis_blk_number))
})

def toPythonDict(attrDict):
    return {x: attrDict[x] for x in attrDict.keys()}

def insertEvent(event, collection):
    collection.insert_one(event)

def put_timestamp(event):
    event['timestamp'] = web3.eth.getBlock(each['blockNumber'])['timestamp']
    return event

def update_balance(address, collection):
    pass

data_logs = event_filter.get_all_entries()
data_collection = real_events
data_collection.remove({})

for each in data_logs:
    event = toPythonDict(decodeEvent(each))
    insertEvent(put_timestamp(event), data_collection)

def handle_event(event):
    insertEvent(put_timestamp(toPythonDict(decodeEvent(event))), data_collection)

async def log_loop(event_filter, poll_interval):
    while True:
        for event in event_filter.get_new_entries():
            handle_event(event)
        await asyncio.sleep(poll_interval)

def main():
    block_filter = web3.eth.filter({"address":token_address, 
                                    "fromBlock":str(hex(genesis_blk_number))})
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(asyncio.new_event_loop())
    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(
            asyncio.gather(
                log_loop(block_filter, 2)))
    finally:
        loop.close()

if __name__ == '__main__':
    main()
